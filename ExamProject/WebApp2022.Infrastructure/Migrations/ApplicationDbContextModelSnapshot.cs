// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp2022.Infrastructure.Data;

#nullable disable

namespace WebApp2022.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DayEnding")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DayStarting")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal>("OfferedPaying")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c712e77-a568-415c-ad7f-10ab554cd6e4"),
                            DayEnding = new DateTime(2022, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStarting = new DateTime(2022, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            OfferedPaying = 3000m,
                            PetId = new Guid("96d4e994-9559-48cb-b9c1-8eb77a96099b")
                        },
                        new
                        {
                            Id = new Guid("15d01d36-951f-4599-a747-a4a4fd38d7b4"),
                            DayEnding = new DateTime(2023, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStarting = new DateTime(2023, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = false,
                            OfferedPaying = 150m,
                            PetId = new Guid("96d4e994-9559-48cb-b9c1-8eb77a96099b")
                        },
                        new
                        {
                            Id = new Guid("a8f31fcf-57af-432a-9f2e-c6856ee41031"),
                            DayEnding = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayStarting = new DateTime(2023, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsAvailable = true,
                            OfferedPaying = 400m,
                            PetId = new Guid("4b8ec921-8cd7-4020-bbc3-e31e6d40aee3")
                        });
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TownId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TownId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bf7afff5-d0dc-416e-83fc-01d89b1d5eb9",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Petar",
                            IsAvailable = false,
                            LastName = "Petrov",
                            LockoutEnabled = false,
                            NormalizedEmail = " ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEM/i+9bvA8dzSoGxb5IXlMJ89jVZDXUmkWGFZVVeSt6CZ+ttvuNYa3hYI01K3hpoiQ==",
                            PhoneNumber = "0882854999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "64bc7e30-be93-42bc-8104-b3aff3e80db0",
                            TownId = new Guid("658cfb89-2396-438d-baea-c10ef9ba492f"),
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e1a0da9-d610-4170-806d-4b97c086d137",
                            Email = "guest1@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            IsAvailable = false,
                            LastName = "Georgiev",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST1@MAIL.COM",
                            NormalizedUserName = "GUEST1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHwNU3ZOdRtY1LE1Ilyuw8KnhXADXXyVBZtg06V3s9UJh+2hiAJK422qQI+24k+6Zg==",
                            PhoneNumber = "0884305667",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8067ef5b-eb0b-4387-a7ee-4377bbf1a3ba",
                            TownId = new Guid("658cfb89-2396-438d-baea-c10ef9ba492f"),
                            TwoFactorEnabled = false,
                            UserName = "guest1"
                        },
                        new
                        {
                            Id = "72153552-7b85-4e34-b236-290e9bbad012",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eee25b04-55ce-4a3e-bc87-f54fa97d1fb1",
                            Email = "guest2@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Boyan",
                            IsAvailable = false,
                            LastName = "Hristov",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST2@MAIL.COM",
                            NormalizedUserName = "GUEST2",
                            PasswordHash = "AQAAAAEAACcQAAAAEGFvhVctu3igf51tljwV5B/CLP8yX9JwAedYBq1arD4G5u9OsnjewP1fkQJiBSRArw==",
                            PhoneNumber = "0854993215",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "121031f2-3337-49be-b2a3-58f4774b6ff8",
                            TownId = new Guid("658cfb89-2396-438d-baea-c10ef9ba492f"),
                            TwoFactorEnabled = false,
                            UserName = "guest2"
                        });
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21fd2544-3246-48bb-be99-9981c44c8836"),
                            AuthorId = "72153552-7b85-4e34-b236-290e9bbad012",
                            Content = "Very good babysitter for pets. Would recommend if you need a babysitter for a couple of days!",
                            ReceiverId = "dea12856-c198-4129-b3f3-b893d8395082",
                            Title = "Great babysitter"
                        },
                        new
                        {
                            Id = new Guid("b09e19e1-e970-47cc-ac48-c3f9d6bc6426"),
                            AuthorId = "dea12856-c198-4129-b3f3-b893d8395082",
                            Content = "I hired Ivan to watch after my gold fish, but he killed it! He is a terrible babysitter!",
                            ReceiverId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Title = "Don't recommend"
                        },
                        new
                        {
                            Id = new Guid("2892e4f0-4e16-4323-8f7c-076bcc74579e"),
                            AuthorId = "dea12856-c198-4129-b3f3-b893d8395082",
                            Content = "He returned my cat ill and starving! He had beaten up my cat!",
                            ReceiverId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Title = "Worst babysitter"
                        },
                        new
                        {
                            Id = new Guid("6f49aa38-a113-4f20-a077-9208099578ae"),
                            AuthorId = "dea12856-c198-4129-b3f3-b893d8395082",
                            Content = "He didn't just watch after my parrot, but even taugth him new words and songs!",
                            ReceiverId = "72153552-7b85-4e34-b236-290e9bbad012",
                            Title = "Can't complain"
                        });
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<double>("Heigth")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Weigth")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Pets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b8ec921-8cd7-4020-bbc3-e31e6d40aee3"),
                            Age = 3,
                            DateAdded = new DateTime(2022, 12, 14, 22, 21, 44, 491, DateTimeKind.Utc).AddTicks(3606),
                            Description = "Gianluigi Donnarumma Giancarlito PinocchLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the",
                            Heigth = 0.29999999999999999,
                            ImageUrl = "https://media.istockphoto.com/id/537373196/photo/trees-forming-a-heart.jpg?s=612x612&w=0&k=20&c=onZKNjkycICe4q2ZDnKi39z42Ax9tpZT7pph-2e5Seo=",
                            IsApproved = true,
                            Name = "Mishi",
                            OwnerId = "dea12856-c198-4129-b3f3-b893d8395082",
                            Requirements = "Needs to be played with and weekly beautition session",
                            Type = 1,
                            Weigth = 4.0
                        },
                        new
                        {
                            Id = new Guid("e97af452-0689-46a0-8739-04a880b25286"),
                            Age = 36,
                            DateAdded = new DateTime(2022, 12, 14, 22, 21, 44, 491, DateTimeKind.Utc).AddTicks(3612),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has",
                            Heigth = 1.5,
                            ImageUrl = "https://www.apple.com/newsroom/images/product/iphone/lifestyle/Apple-Shot-on-iPhone-macro-Guido-Cassanelli_inline.jpg.large.jpg",
                            IsApproved = false,
                            Name = "Pablo",
                            OwnerId = "72153552-7b85-4e34-b236-290e9bbad012",
                            Requirements = "Every second full noon he goes to Tsvetelina Yaneva's concert",
                            Type = 6,
                            Weigth = 5.0
                        },
                        new
                        {
                            Id = new Guid("96d4e994-9559-48cb-b9c1-8eb77a96099b"),
                            Age = 69,
                            DateAdded = new DateTime(2022, 12, 14, 22, 21, 44, 491, DateTimeKind.Utc).AddTicks(3617),
                            Description = "Horsey. He big and likes balconies.",
                            Heigth = 3.0,
                            ImageUrl = "https://i.kym-cdn.com/entries/icons/original/000/035/644/juancover.jpg",
                            IsApproved = true,
                            Name = "Juan",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Requirements = "He needs immediate access to every balcony in perementar of 1 km and to to his wife Juanita",
                            Type = 3,
                            Weigth = 420.0
                        },
                        new
                        {
                            Id = new Guid("38237218-53e9-413e-ade3-49b4a122922f"),
                            Age = 42,
                            DateAdded = new DateTime(2022, 12, 14, 22, 21, 44, 491, DateTimeKind.Utc).AddTicks(3620),
                            Description = "Horsey. She big and likes balconies. She the beloved wife of Juan",
                            Heigth = 2.8500000000000001,
                            ImageUrl = "https://i.redd.it/4kc2skyohqx51.jpg",
                            IsApproved = false,
                            Name = "Juanita",
                            OwnerId = "72153552-7b85-4e34-b236-290e9bbad012",
                            Requirements = "Every evening she needs to hear her husband Juan",
                            Type = 2,
                            Weigth = 300.0
                        });
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnnouncementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BabysitterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("BabysitterId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00ff1a5f-8b2f-4b84-999e-e524da8f461a"),
                            AnnouncementId = new Guid("15d01d36-951f-4599-a747-a4a4fd38d7b4"),
                            BabysitterId = "dea12856-c198-4129-b3f3-b893d8395082",
                            IsConfirmed = true
                        },
                        new
                        {
                            Id = new Guid("f0207fe1-af72-48de-88c3-28e76f33f588"),
                            AnnouncementId = new Guid("7c712e77-a568-415c-ad7f-10ab554cd6e4"),
                            BabysitterId = "dea12856-c198-4129-b3f3-b893d8395082",
                            IsConfirmed = false
                        },
                        new
                        {
                            Id = new Guid("52cfc479-066a-4772-94f0-c24826f9b357"),
                            AnnouncementId = new Guid("7c712e77-a568-415c-ad7f-10ab554cd6e4"),
                            BabysitterId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            IsConfirmed = false
                        },
                        new
                        {
                            Id = new Guid("01f39c0e-1b4a-4200-9469-094175666e4d"),
                            AnnouncementId = new Guid("a8f31fcf-57af-432a-9f2e-c6856ee41031"),
                            BabysitterId = "72153552-7b85-4e34-b236-290e9bbad012",
                            IsConfirmed = false
                        });
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Town", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("658cfb89-2396-438d-baea-c10ef9ba492f"),
                            IsApproved = true,
                            Name = "Veliko Tarnovo"
                        },
                        new
                        {
                            Id = new Guid("651dc286-24dd-473e-8099-a56ad3e7a6e2"),
                            IsApproved = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = new Guid("d3e30c24-857f-4cd0-ba75-b9accb4d7c9f"),
                            IsApproved = true,
                            Name = "Lovech"
                        },
                        new
                        {
                            Id = new Guid("db7127bc-1d68-4b3b-a523-a68a78b7e4a8"),
                            IsApproved = true,
                            Name = "Pleven"
                        },
                        new
                        {
                            Id = new Guid("d6ce7d29-6f17-478d-af2f-b45fb212dd02"),
                            IsApproved = false,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = new Guid("6fb2fef5-b16e-49dd-bfc4-8aef199df54c"),
                            IsApproved = true,
                            Name = "Pavlikeni"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApp2022.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApp2022.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp2022.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApp2022.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Announcement", b =>
                {
                    b.HasOne("WebApp2022.Infrastructure.Data.Pet", "Pet")
                        .WithMany("Announcements")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.HasOne("WebApp2022.Infrastructure.Data.Town", "Town")
                        .WithMany("Users")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Comment", b =>
                {
                    b.HasOne("WebApp2022.Infrastructure.Data.ApplicationUser", "Author")
                        .WithMany("CommentsWritten")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApp2022.Infrastructure.Data.ApplicationUser", "Receiver")
                        .WithMany("CommentsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Pet", b =>
                {
                    b.HasOne("WebApp2022.Infrastructure.Data.ApplicationUser", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Request", b =>
                {
                    b.HasOne("WebApp2022.Infrastructure.Data.Announcement", "Announcement")
                        .WithMany("Requests")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp2022.Infrastructure.Data.ApplicationUser", "Babysitter")
                        .WithMany("Requests")
                        .HasForeignKey("BabysitterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Babysitter");
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Announcement", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.Navigation("CommentsReceived");

                    b.Navigation("CommentsWritten");

                    b.Navigation("Pets");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Pet", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("WebApp2022.Infrastructure.Data.Town", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
