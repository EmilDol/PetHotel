// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelEquipmentRenting.Infrastructure.Data;

#nullable disable

namespace TravelEquipmentRenting.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221128145518_AddedIsApprovedToTownsAndCountries")]
    partial class AddedIsApprovedToTownsAndCountries
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39a87631-5fc3-4c14-b96f-dec2408600a5"),
                            Name = "Beginer Friendly"
                        },
                        new
                        {
                            Id = new Guid("fed5527f-721f-43b7-ba3e-8d4160cc714c"),
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = new Guid("ae9f7553-eaae-45fe-8e15-12ec6187f980"),
                            Name = "Winter suitable"
                        });
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21fd2544-3246-48bb-be99-9981c44c8836"),
                            AuthorId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Content = "He stole my wallet and refuses to give it back! He is a terrible person!",
                            ReceiverId = "dea12856-c198-4129-b3f3-b893d8395082",
                            Title = "He stole my wallet"
                        },
                        new
                        {
                            Id = new Guid("b09e19e1-e970-47cc-ac48-c3f9d6bc6426"),
                            AuthorId = "dea12856-c198-4129-b3f3-b893d8395082",
                            Content = "He owes me money and i decided to take them by force! He is a terrible white robber!",
                            ReceiverId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Title = "He owes me money"
                        });
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46c40eab-c926-4d8d-a972-ef4e925eae4f"),
                            IsApproved = false,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("ff00449c-58f1-45d3-9388-4ac2f5ce650d"),
                            IsApproved = false,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = new Guid("24e0def5-4df1-4d23-a45b-4548f2c4c89b"),
                            IsApproved = false,
                            Name = "Serbia"
                        });
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PricePerDay")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b8ec921-8cd7-4020-bbc3-e31e6d40aee3"),
                            DateAdded = new DateTime(2022, 11, 28, 14, 55, 17, 681, DateTimeKind.Utc).AddTicks(7355),
                            Description = "Gianluigi Donnarumma Giancarlito PinocchLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the",
                            ImageUrl = "https://media.istockphoto.com/id/537373196/photo/trees-forming-a-heart.jpg?s=612x612&w=0&k=20&c=onZKNjkycICe4q2ZDnKi39z42Ax9tpZT7pph-2e5Seo=",
                            IsApproved = true,
                            IsAvailable = true,
                            Name = "Espadrilles",
                            OwnerId = "dea12856-c198-4129-b3f3-b893d8395082",
                            PricePerDay = 10m
                        },
                        new
                        {
                            Id = new Guid("e97af452-0689-46a0-8739-04a880b25286"),
                            DateAdded = new DateTime(2022, 11, 28, 14, 55, 17, 681, DateTimeKind.Utc).AddTicks(7365),
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has",
                            ImageUrl = "https://www.apple.com/newsroom/images/product/iphone/lifestyle/Apple-Shot-on-iPhone-macro-Guido-Cassanelli_inline.jpg.large.jpg",
                            IsApproved = false,
                            IsAvailable = true,
                            Name = "TestNotApproved",
                            OwnerId = "dea12856-c198-4129-b3f3-b893d8395082",
                            PricePerDay = 10m
                        },
                        new
                        {
                            Id = new Guid("96d4e994-9559-48cb-b9c1-8eb77a96099b"),
                            DateAdded = new DateTime(2022, 11, 28, 14, 55, 17, 681, DateTimeKind.Utc).AddTicks(7369),
                            Description = "Asdasdasdasdasd dasdhaoshgaifgvhqoudb aoidgaudgbiaf",
                            ImageUrl = "https://media.istockphoto.com/id/1216425366/photo/heart-and-soul.jpg?s=612x612&w=0&k=20&c=bj4RaFi61ToNPKaHfszM1ShMjl3Lf_Qg0FvhkV1eM0s=",
                            IsApproved = true,
                            IsAvailable = true,
                            Name = "Test1",
                            OwnerId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            PricePerDay = 25m
                        });
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.ProductCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("fed5527f-721f-43b7-ba3e-8d4160cc714c"),
                            ProductId = new Guid("4b8ec921-8cd7-4020-bbc3-e31e6d40aee3")
                        },
                        new
                        {
                            CategoryId = new Guid("39a87631-5fc3-4c14-b96f-dec2408600a5"),
                            ProductId = new Guid("4b8ec921-8cd7-4020-bbc3-e31e6d40aee3")
                        },
                        new
                        {
                            CategoryId = new Guid("ae9f7553-eaae-45fe-8e15-12ec6187f980"),
                            ProductId = new Guid("e97af452-0689-46a0-8739-04a880b25286")
                        },
                        new
                        {
                            CategoryId = new Guid("39a87631-5fc3-4c14-b96f-dec2408600a5"),
                            ProductId = new Guid("e97af452-0689-46a0-8739-04a880b25286")
                        },
                        new
                        {
                            CategoryId = new Guid("ae9f7553-eaae-45fe-8e15-12ec6187f980"),
                            ProductId = new Guid("96d4e994-9559-48cb-b9c1-8eb77a96099b")
                        });
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46b1c11e-dbd0-432a-9bbc-b9cf6d6adfd4"),
                            ProductId = new Guid("4b8ec921-8cd7-4020-bbc3-e31e6d40aee3"),
                            StartDate = new DateTime(2022, 11, 28, 14, 55, 17, 681, DateTimeKind.Utc).AddTicks(7588),
                            TenantId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        });
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Town", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("658cfb89-2396-438d-baea-c10ef9ba492f"),
                            CountryId = new Guid("46c40eab-c926-4d8d-a972-ef4e925eae4f"),
                            IsApproved = false,
                            Name = "Veliko Tarnovo"
                        },
                        new
                        {
                            Id = new Guid("651dc286-24dd-473e-8099-a56ad3e7a6e2"),
                            CountryId = new Guid("46c40eab-c926-4d8d-a972-ef4e925eae4f"),
                            IsApproved = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = new Guid("d3e30c24-857f-4cd0-ba75-b9accb4d7c9f"),
                            CountryId = new Guid("ff00449c-58f1-45d3-9388-4ac2f5ce650d"),
                            IsApproved = false,
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = new Guid("db7127bc-1d68-4b3b-a523-a68a78b7e4a8"),
                            CountryId = new Guid("ff00449c-58f1-45d3-9388-4ac2f5ce650d"),
                            IsApproved = false,
                            Name = "Frankfurt"
                        },
                        new
                        {
                            Id = new Guid("d6ce7d29-6f17-478d-af2f-b45fb212dd02"),
                            CountryId = new Guid("24e0def5-4df1-4d23-a45b-4548f2c4c89b"),
                            IsApproved = false,
                            Name = "Belgrad"
                        },
                        new
                        {
                            Id = new Guid("6fb2fef5-b16e-49dd-bfc4-8aef199df54c"),
                            CountryId = new Guid("24e0def5-4df1-4d23-a45b-4548f2c4c89b"),
                            IsApproved = false,
                            Name = "Nis"
                        });
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("TownId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("TownId");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9fcae4f-0278-47e1-b5bd-b1aa2b5214d2",
                            Email = "agent@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AGENT@MAIL.COM",
                            NormalizedUserName = "AGENT@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENKOJpyiJIcELkCnlInPEYDqAuGJNANE/xQ5hcr9ZAl1FCO31EaA3Iu6off6Nrdwqg==",
                            PhoneNumber = "0882854999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ccf91328-5c69-4fae-8810-522b8e65b9de",
                            TwoFactorEnabled = false,
                            UserName = "agent@mail.com",
                            FirstName = "Jamal",
                            LastName = "Frederick",
                            TownId = new Guid("6fb2fef5-b16e-49dd-bfc4-8aef199df54c")
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "021acf41-ae0c-4063-8ac0-720a92641cdf",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@MAIL.COM",
                            NormalizedUserName = "GUEST@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHKPg4d4OJoIvM1ijF4WTgYXPW8C/CSq8lc/L5JOCWzjtAgSXVuld5SwvoAimw2Aag==",
                            PhoneNumber = "0884305667",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fb46ac0-eb1b-4531-9176-37f3552cc33c",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com",
                            FirstName = "Ivan",
                            LastName = "Georgiev",
                            TownId = new Guid("db7127bc-1d68-4b3b-a523-a68a78b7e4a8")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Comment", b =>
                {
                    b.HasOne("TravelEquipmentRenting.Infrastructure.Data.ApplicationUser", "Author")
                        .WithMany("CommentsWritten")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelEquipmentRenting.Infrastructure.Data.ApplicationUser", "Receiver")
                        .WithMany("CommentsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Product", b =>
                {
                    b.HasOne("TravelEquipmentRenting.Infrastructure.Data.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.ProductCategory", b =>
                {
                    b.HasOne("TravelEquipmentRenting.Infrastructure.Data.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelEquipmentRenting.Infrastructure.Data.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Rental", b =>
                {
                    b.HasOne("TravelEquipmentRenting.Infrastructure.Data.Product", "Product")
                        .WithOne("Rental")
                        .HasForeignKey("TravelEquipmentRenting.Infrastructure.Data.Rental", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelEquipmentRenting.Infrastructure.Data.ApplicationUser", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Town", b =>
                {
                    b.HasOne("TravelEquipmentRenting.Infrastructure.Data.Country", "Country")
                        .WithMany("Towns")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.HasOne("TravelEquipmentRenting.Infrastructure.Data.Town", "Town")
                        .WithMany("Users")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Country", b =>
                {
                    b.Navigation("Towns");
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Product", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.Town", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TravelEquipmentRenting.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.Navigation("CommentsReceived");

                    b.Navigation("CommentsWritten");
                });
#pragma warning restore 612, 618
        }
    }
}
